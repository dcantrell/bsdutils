--- cp/utils.c.orig	2021-04-09 02:24:01.000000000 +0200
+++ cp/utils.c	2021-06-12 06:22:35.008187458 +0200
@@ -38,7 +38,6 @@ static char sccsid[] = "@(#)utils.c	8.3
 __FBSDID("$FreeBSD$");
 
 #include <sys/types.h>
-#include <sys/acl.h>
 #include <sys/param.h>
 #include <sys/stat.h>
 #ifdef VM_AND_BUFFER_CACHE_SYNCHRONIZED
@@ -57,6 +56,8 @@ __FBSDID("$FreeBSD$");
 
 #include "extern.h"
 
+#include "compat.h"
+
 #define	cp_pct(x, y)	((y == 0) ? 0 : (int)(100.0 * (x) / (y)))
 
 /*
@@ -99,11 +100,9 @@ copy_file(const FTSENT *entp, int dne)
 	static char *buf = NULL;
 	static size_t bufsize;
 	struct stat *fs;
-	ssize_t rcount, wcount;
-	size_t wresid;
+	ssize_t rcount;
 	off_t wtotal;
 	int ch, checkch, from_fd, rval, to_fd;
-	char *bufp;
 #ifdef VM_AND_BUFFER_CACHE_SYNCHRONIZED
 	char *p;
 #endif
@@ -194,13 +193,6 @@ copy_file(const FTSENT *entp, int dne)
 				if (wcount <= 0)
 					break;
 				wtotal += wcount;
-				if (info) {
-					info = 0;
-					(void)fprintf(stderr,
-					    "%s -> %s %3d%%\n",
-					    entp->fts_path, to.p_path,
-					    cp_pct(wtotal, fs->st_size));
-				}
 				if (wcount >= (ssize_t)wresid)
 					break;
 			}
@@ -246,13 +238,6 @@ copy_file(const FTSENT *entp, int dne)
 					    buf, bufsize);
 				}
 				wtotal += rcount;
-				if (info) {
-					info = 0;
-					(void)fprintf(stderr,
-					    "%s -> %s %3d%%\n",
-					    entp->fts_path, to.p_path,
-					    cp_pct(wtotal, fs->st_size));
-				}
 			} while (rcount > 0);
 			if (rcount < 0) {
 				warn("%s", entp->fts_path);
@@ -281,8 +266,6 @@ copy_file(const FTSENT *entp, int dne)
 	if (!lflag && !sflag) {
 		if (pflag && setfile(fs, to_fd))
 			rval = 1;
-		if (pflag && preserve_fd_acls(from_fd, to_fd) != 0)
-			rval = 1;
 		if (close(to_fd)) {
 			warn("%s", to.p_path);
 			rval = 1;
@@ -409,163 +392,14 @@ setfile(struct stat *fs, int fd)
 
 	if (!gotstat || fs->st_mode != ts.st_mode)
 		if (fdval ? fchmod(fd, fs->st_mode) :
-		    (islink ? lchmod(to.p_path, fs->st_mode) :
-		    chmod(to.p_path, fs->st_mode))) {
+		    chmod(to.p_path, fs->st_mode)) {
 			warn("chmod: %s", to.p_path);
 			rval = 1;
 		}
 
-	if (!gotstat || fs->st_flags != ts.st_flags)
-		if (fdval ?
-		    fchflags(fd, fs->st_flags) :
-		    (islink ? lchflags(to.p_path, fs->st_flags) :
-		    chflags(to.p_path, fs->st_flags))) {
-			warn("chflags: %s", to.p_path);
-			rval = 1;
-		}
-
 	return (rval);
 }
 
-int
-preserve_fd_acls(int source_fd, int dest_fd)
-{
-	acl_t acl;
-	acl_type_t acl_type;
-	int acl_supported = 0, ret, trivial;
-
-	ret = fpathconf(source_fd, _PC_ACL_NFS4);
-	if (ret > 0 ) {
-		acl_supported = 1;
-		acl_type = ACL_TYPE_NFS4;
-	} else if (ret < 0 && errno != EINVAL) {
-		warn("fpathconf(..., _PC_ACL_NFS4) failed for %s", to.p_path);
-		return (1);
-	}
-	if (acl_supported == 0) {
-		ret = fpathconf(source_fd, _PC_ACL_EXTENDED);
-		if (ret > 0 ) {
-			acl_supported = 1;
-			acl_type = ACL_TYPE_ACCESS;
-		} else if (ret < 0 && errno != EINVAL) {
-			warn("fpathconf(..., _PC_ACL_EXTENDED) failed for %s",
-			    to.p_path);
-			return (1);
-		}
-	}
-	if (acl_supported == 0)
-		return (0);
-
-	acl = acl_get_fd_np(source_fd, acl_type);
-	if (acl == NULL) {
-		warn("failed to get acl entries while setting %s", to.p_path);
-		return (1);
-	}
-	if (acl_is_trivial_np(acl, &trivial)) {
-		warn("acl_is_trivial() failed for %s", to.p_path);
-		acl_free(acl);
-		return (1);
-	}
-	if (trivial) {
-		acl_free(acl);
-		return (0);
-	}
-	if (acl_set_fd_np(dest_fd, acl, acl_type) < 0) {
-		warn("failed to set acl entries for %s", to.p_path);
-		acl_free(acl);
-		return (1);
-	}
-	acl_free(acl);
-	return (0);
-}
-
-int
-preserve_dir_acls(struct stat *fs, char *source_dir, char *dest_dir)
-{
-	acl_t (*aclgetf)(const char *, acl_type_t);
-	int (*aclsetf)(const char *, acl_type_t, acl_t);
-	struct acl *aclp;
-	acl_t acl;
-	acl_type_t acl_type;
-	int acl_supported = 0, ret, trivial;
-
-	ret = pathconf(source_dir, _PC_ACL_NFS4);
-	if (ret > 0) {
-		acl_supported = 1;
-		acl_type = ACL_TYPE_NFS4;
-	} else if (ret < 0 && errno != EINVAL) {
-		warn("fpathconf(..., _PC_ACL_NFS4) failed for %s", source_dir);
-		return (1);
-	}
-	if (acl_supported == 0) {
-		ret = pathconf(source_dir, _PC_ACL_EXTENDED);
-		if (ret > 0) {
-			acl_supported = 1;
-			acl_type = ACL_TYPE_ACCESS;
-		} else if (ret < 0 && errno != EINVAL) {
-			warn("fpathconf(..., _PC_ACL_EXTENDED) failed for %s",
-			    source_dir);
-			return (1);
-		}
-	}
-	if (acl_supported == 0)
-		return (0);
-
-	/*
-	 * If the file is a link we will not follow it.
-	 */
-	if (S_ISLNK(fs->st_mode)) {
-		aclgetf = acl_get_link_np;
-		aclsetf = acl_set_link_np;
-	} else {
-		aclgetf = acl_get_file;
-		aclsetf = acl_set_file;
-	}
-	if (acl_type == ACL_TYPE_ACCESS) {
-		/*
-		 * Even if there is no ACL_TYPE_DEFAULT entry here, a zero
-		 * size ACL will be returned. So it is not safe to simply
-		 * check the pointer to see if the default ACL is present.
-		 */
-		acl = aclgetf(source_dir, ACL_TYPE_DEFAULT);
-		if (acl == NULL) {
-			warn("failed to get default acl entries on %s",
-			    source_dir);
-			return (1);
-		}
-		aclp = &acl->ats_acl;
-		if (aclp->acl_cnt != 0 && aclsetf(dest_dir,
-		    ACL_TYPE_DEFAULT, acl) < 0) {
-			warn("failed to set default acl entries on %s",
-			    dest_dir);
-			acl_free(acl);
-			return (1);
-		}
-		acl_free(acl);
-	}
-	acl = aclgetf(source_dir, acl_type);
-	if (acl == NULL) {
-		warn("failed to get acl entries on %s", source_dir);
-		return (1);
-	}
-	if (acl_is_trivial_np(acl, &trivial)) {
-		warn("acl_is_trivial() failed on %s", source_dir);
-		acl_free(acl);
-		return (1);
-	}
-	if (trivial) {
-		acl_free(acl);
-		return (0);
-	}
-	if (aclsetf(dest_dir, acl_type, acl) < 0) {
-		warn("failed to set acl entries on %s", dest_dir);
-		acl_free(acl);
-		return (1);
-	}
-	acl_free(acl);
-	return (0);
-}
-
 void
 usage(void)
 {
