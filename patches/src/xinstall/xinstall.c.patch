--- xinstall/xinstall.c.orig	2021-04-09 02:24:13.000000000 +0200
+++ xinstall/xinstall.c	2021-06-26 22:10:53.281498208 +0200
@@ -57,13 +57,8 @@ __FBSDID("$FreeBSD$");
 #include <fcntl.h>
 #include <grp.h>
 #include <libgen.h>
-#include <md5.h>
 #include <paths.h>
 #include <pwd.h>
-#include <ripemd.h>
-#include <sha.h>
-#include <sha256.h>
-#include <sha512.h>
 #include <spawn.h>
 #include <stdint.h>
 #include <stdio.h>
@@ -73,7 +68,9 @@ __FBSDID("$FreeBSD$");
 #include <unistd.h>
 #include <vis.h>
 
-#include "mtree.h"
+#include <openssl/evp.h>
+
+#include "compat.h"
 
 /*
  * We need to build xinstall during the bootstrap stage when building on a
@@ -99,13 +96,7 @@ __FBSDID("$FreeBSD$");
 #define	NOCHANGEBITS	(UF_IMMUTABLE | UF_APPEND | SF_IMMUTABLE | SF_APPEND)
 #define	BACKUP_SUFFIX	".old"
 
-typedef union {
-	MD5_CTX		MD5;
-	RIPEMD160_CTX	RIPEMD160;
-	SHA1_CTX	SHA1;
-	SHA256_CTX	SHA256;
-	SHA512_CTX	SHA512;
-}	DIGEST_CTX;
+typedef EVP_MD_CTX *DIGEST_CTX;
 
 static enum {
 	DIGEST_NONE = 0,
@@ -165,7 +156,7 @@ main(int argc, char *argv[])
 	fset = 0;
 	iflags = 0;
 	group = owner = NULL;
-	while ((ch = getopt(argc, argv, "B:bCcD:df:g:h:l:M:m:N:o:pSsT:Uv")) !=
+	while ((ch = getopt(argc, argv, "B:bCcD:dg:h:l:M:m:o:pSsT:Uv")) !=
 	     -1)
 		switch((char)ch) {
 		case 'B':
@@ -186,10 +177,12 @@ main(int argc, char *argv[])
 		case 'd':
 			dodir = 1;
 			break;
+#if 0
 		case 'f':
 			haveopt_f = 1;
 			fflags = optarg;
 			break;
+#endif
 		case 'g':
 			haveopt_g = 1;
 			group = optarg;
@@ -236,11 +229,13 @@ main(int argc, char *argv[])
 			mode = getmode(set, 0);
 			free(set);
 			break;
+#if 0
 		case 'N':
 			if (!setup_getid(optarg))
 				err(EX_OSERR, "Unable to use user and group "
 				    "databases in `%s'", optarg);
 			break;
+#endif
 		case 'o':
 			haveopt_o = 1;
 			owner = optarg;
@@ -310,30 +305,38 @@ main(int argc, char *argv[])
 
 	/* get group and owner id's */
 	if (group != NULL && !dounpriv) {
-		if (gid_from_group(group, &gid) == -1) {
+		struct group *gr = getgrnam(group);
+		if (!gr) {
 			id_t id;
 			if (!parseid(group, &id))
 				errx(1, "unknown group %s", group);
 			gid = id;
+		} else {
+			gid = gr->gr_gid;
 		}
 	} else
 		gid = (gid_t)-1;
 
 	if (owner != NULL && !dounpriv) {
-		if (uid_from_user(owner, &uid) == -1) {
+		struct passwd *pw = getpwnam(owner);
+		if (!pw) {
 			id_t id;
 			if (!parseid(owner, &id))
 				errx(1, "unknown user %s", owner);
 			uid = id;
+		} else {
+			uid = pw->pw_uid;
 		}
 	} else
 		uid = (uid_t)-1;
 
+#if 0
 	if (fflags != NULL && !dounpriv) {
 		if (strtofflags(&fflags, &fset, NULL))
 			errx(EX_USAGE, "%s: invalid flag", fflags);
 		iflags |= SETFLAGS;
 	}
+#endif
 
 	if (metafile != NULL) {
 		if ((metafp = fopen(metafile, "a")) == NULL)
@@ -384,8 +387,7 @@ main(int argc, char *argv[])
 		if (stat(*argv, &from_sb))
 			err(EX_OSERR, "%s", *argv);
 		if (!S_ISREG(to_sb.st_mode)) {
-			errno = EFTYPE;
-			err(EX_OSERR, "%s", to_name);
+			errx(EX_OSERR, "%s: not a regular file", to_name);
 		}
 		if (to_sb.st_dev == from_sb.st_dev &&
 		    to_sb.st_ino == from_sb.st_ino)
@@ -400,91 +402,106 @@ main(int argc, char *argv[])
 static char *
 digest_file(const char *name)
 {
+	DIGEST_CTX ctx;
+	FILE *f;
+	char *buf;
 
-	switch (digesttype) {
-	case DIGEST_MD5:
-		return (MD5File(name, NULL));
-	case DIGEST_RIPEMD160:
-		return (RIPEMD160_File(name, NULL));
-	case DIGEST_SHA1:
-		return (SHA1_File(name, NULL));
-	case DIGEST_SHA256:
-		return (SHA256_File(name, NULL));
-	case DIGEST_SHA512:
-		return (SHA512_File(name, NULL));
-	default:
-		return (NULL);
+	if (digesttype == DIGEST_NONE)
+		return NULL;
+
+	f = fopen(name, "rb");
+	if (!f)
+		errx(1, "unable to open file %s", name);
+
+	buf = malloc(16 * 1024);
+	if (!buf) {
+		fclose(f);
+		errx(1, "unable to allocate buffer");
+	}
+
+	digest_init(&ctx);
+	for (;;) {
+		size_t n = fread(buf, 1, 16 * 1024, f);
+		digest_update(&ctx, buf, n);
+		if (n != (16 * 1024)) {
+			if (feof(f))
+				break;
+			if (ferror(f)) {
+				free(buf);
+				fclose(f);
+				errx(1, "unable to read file %s", name);
+			}
+		}
 	}
+
+	fclose(f);
+	return digest_end(&ctx, NULL);
 }
 
 static void
 digest_init(DIGEST_CTX *c)
 {
+	const EVP_MD *digestmd = NULL;
 
 	switch (digesttype) {
 	case DIGEST_NONE:
 		break;
 	case DIGEST_MD5:
-		MD5Init(&(c->MD5));
+		digestmd = EVP_md5();
 		break;
 	case DIGEST_RIPEMD160:
-		RIPEMD160_Init(&(c->RIPEMD160));
+		digestmd = EVP_ripemd160();
 		break;
 	case DIGEST_SHA1:
-		SHA1_Init(&(c->SHA1));
+		digestmd = EVP_sha1();
 		break;
 	case DIGEST_SHA256:
-		SHA256_Init(&(c->SHA256));
+		digestmd = EVP_sha256();
 		break;
 	case DIGEST_SHA512:
-		SHA512_Init(&(c->SHA512));
+		digestmd = EVP_sha512();
 		break;
 	}
+
+	if (digestmd) {
+		*c = EVP_MD_CTX_new();
+		if (!c || !EVP_DigestInit_ex(*c, digestmd, NULL))
+			errx(1, "failed to initialize digest");
+	}
 }
 
 static void
 digest_update(DIGEST_CTX *c, const char *data, size_t len)
 {
+	if (digesttype == DIGEST_NONE)
+		return;
 
-	switch (digesttype) {
-	case DIGEST_NONE:
-		break;
-	case DIGEST_MD5:
-		MD5Update(&(c->MD5), data, len);
-		break;
-	case DIGEST_RIPEMD160:
-		RIPEMD160_Update(&(c->RIPEMD160), data, len);
-		break;
-	case DIGEST_SHA1:
-		SHA1_Update(&(c->SHA1), data, len);
-		break;
-	case DIGEST_SHA256:
-		SHA256_Update(&(c->SHA256), data, len);
-		break;
-	case DIGEST_SHA512:
-		SHA512_Update(&(c->SHA512), data, len);
-		break;
-	}
+	EVP_DigestUpdate(*c, data, len);
 }
 
 static char *
 digest_end(DIGEST_CTX *c, char *buf)
 {
+	unsigned char digest[EVP_MAX_MD_SIZE + 1];
 
-	switch (digesttype) {
-	case DIGEST_MD5:
-		return (MD5End(&(c->MD5), buf));
-	case DIGEST_RIPEMD160:
-		return (RIPEMD160_End(&(c->RIPEMD160), buf));
-	case DIGEST_SHA1:
-		return (SHA1_End(&(c->SHA1), buf));
-	case DIGEST_SHA256:
-		return (SHA256_End(&(c->SHA256), buf));
-	case DIGEST_SHA512:
-		return (SHA512_End(&(c->SHA512), buf));
-	default:
-		return (NULL);
+	if ((digesttype == DIGEST_NONE) || !*c)
+		return NULL;
+
+	unsigned int mdlen = 0;
+	if (!EVP_DigestFinal(*c, digest, &mdlen))
+		errx(1, "failed to finalize digest");
+
+	if (!buf) {
+		buf = malloc(mdlen * 2 + 1);
+		if (!buf)
+			errx(1, "unable to allocate buffer");
 	}
+
+	for (unsigned int i = 0; i < mdlen; ++i) {
+	    sprintf(buf + (i * 2), "%02x", digest[i]);
+	}
+
+	return buf;
 }
 
 /*
@@ -529,7 +546,7 @@ static int
 do_link(const char *from_name, const char *to_name,
     const struct stat *target_sb)
 {
-	char tmpl[MAXPATHLEN];
+	char tmpl[MAXPATHLEN + 12];
 	int ret;
 
 	if (safecopy && target_sb != NULL) {
@@ -685,6 +702,7 @@ makelink(const char *from_name, const ch
 
 	if (dolink & LN_RELATIVE) {
 		char *to_name_copy, *cp, *d, *ld, *ls, *s;
+		size_t plen;
 
 		if (*from_name != '/') {
 			/* this is already a relative link */
@@ -709,14 +727,18 @@ makelink(const char *from_name, const ch
 		if (realpath(cp, dst) == NULL)
 			err(EX_OSERR, "%s: realpath", cp);
 		/* .. and add the last component. */
+		plen = strlen(dst);
 		if (strcmp(dst, "/") != 0) {
-			if (strlcat(dst, "/", sizeof(dst)) > sizeof(dst))
+			if (sizeof(dst) < (plen + 2))
 				errx(1, "resolved pathname too long");
+			dst[plen++] = '/';
+			dst[plen] = '\0';
 		}
 		strcpy(to_name_copy, to_name);
 		cp = basename(to_name_copy);
-		if (strlcat(dst, cp, sizeof(dst)) > sizeof(dst))
+		if (sizeof(dst) < (plen + strlen(cp) + 1))
 			errx(1, "resolved pathname too long");
+		memcpy(&dst[plen], cp, strlen(cp) + 1);
 		free(to_name_copy);
 
 		/* Trim common path components. */
@@ -739,9 +761,9 @@ makelink(const char *from_name, const ch
 		/* Count the number of directories we need to backtrack. */
 		for (++d, lnk[0] = '\0'; *d; d++)
 			if (*d == '/')
-				(void)strlcat(lnk, "../", sizeof(lnk));
+				(void)strcat(lnk, "../");
 
-		(void)strlcat(lnk, ++s, sizeof(lnk));
+		(void)strcat(lnk, ++s);
 
 		do_symlink(lnk, to_name, target_sb);
 		/* XXX: Link may point outside of destdir. */
@@ -763,7 +785,7 @@ makelink(const char *from_name, const ch
  *	build a path name and install the file
  */
 static void
-install(const char *from_name, const char *to_name, u_long fset, u_int flags)
+install(const char *from_name, const char *to_name, u_long fset __attribute__((unused)), u_int flags)
 {
 	struct stat from_sb, temp_sb, to_sb;
 	struct timespec tsb[2];
@@ -783,8 +805,7 @@ install(const char *from_name, const cha
 			if (stat(from_name, &from_sb))
 				err(EX_OSERR, "%s", from_name);
 			if (!S_ISREG(from_sb.st_mode)) {
-				errno = EFTYPE;
-				err(EX_OSERR, "%s", from_name);
+				errx(EX_OSERR, "%s: not a regular file", from_name);
 			}
 		}
 		/* Build the target path. */
@@ -818,8 +839,7 @@ install(const char *from_name, const cha
 	}
 
 	if (target && !S_ISREG(to_sb.st_mode) && !S_ISLNK(to_sb.st_mode)) {
-		errno = EFTYPE;
-		warn("%s", to_name);
+		warnx("%s: not a regular file or a symlink", to_name);
 		return;
 	}
 
@@ -1068,14 +1088,14 @@ install(const char *from_name, const cha
  *	unless it points to pre-computed digest.
  */
 static int
-compare(int from_fd, const char *from_name __unused, size_t from_len,
-	int to_fd, const char *to_name __unused, size_t to_len,
+compare(int from_fd, const char *from_name __attribute__((unused)), size_t from_len,
+	int to_fd, const char *to_name __attribute__((unused)), size_t to_len,
 	char **dresp)
 {
 	char *p, *q;
 	int rv;
 	int do_digest, done_compare;
-	DIGEST_CTX ctx;
+	DIGEST_CTX ctx = NULL;
 
 	rv = 0;
 	if (from_len != to_len)
@@ -1171,7 +1191,7 @@ create_tempfile(const char *path, char *
  *	create a new file, overwriting an existing one if necessary
  */
 static int
-create_newfile(const char *path, int target, struct stat *sbp)
+create_newfile(const char *path, int target, struct stat *sbp __attribute__((unused)))
 {
 	char backup[MAXPATHLEN];
 	int saved_errno = 0;
@@ -1333,16 +1353,17 @@ strip(const char *to_name, int to_fd, co
 		args[5] = NULL;
 	}
 	error = posix_spawnp(&pid, stripbin, NULL, NULL,
-	    __DECONST(char **, args), environ);
+	    (char **)args, environ);
 	if (error != 0) {
 		(void)unlink(to_name);
-		errc(error == EAGAIN || error == EPROCLIM || error == ENOMEM ?
-		    EX_TEMPFAIL : EX_OSERR, error, "spawn %s", stripbin);
+		errno = error;
+		err(EX_OSERR, "spawn %s", stripbin);
 	}
 	if (waitpid(pid, &status, 0) == -1) {
 		error = errno;
 		(void)unlink(to_name);
-		errc(EX_SOFTWARE, error, "wait");
+		errno = error;
+		err(EX_SOFTWARE, "wait");
 		/* NOTREACHED */
 	}
 	if (status != 0) {
