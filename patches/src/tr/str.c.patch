--- tr/str.c.orig	2021-06-27 13:44:30.722200823 +0200
+++ tr/str.c	2021-06-27 16:35:19.118459311 +0200
@@ -51,6 +51,8 @@ static const char sccsid[] = "@(#)str.c
 
 #include "extern.h"
 
+#include "compat.h"
+
 static int      backslash(STR *, int *);
 static int	bracket(STR *);
 static void	genclass(STR *);
@@ -58,6 +60,44 @@ static void	genequiv(STR *);
 static int      genrange(STR *, int);
 static void	genseq(STR *);
 
+static wint_t
+findwchar(wctype_t wct, wchar_t min, wchar_t max)
+{
+	for (; min <= max; ++min) {
+		if (iswctype(min, wct))
+			return min;
+	}
+	return (wint_t)-1;
+}
+
+/* we cannot reasonably implement this for wide characters/unicode, since
+ * the standard posix api has no way to find out the actual ranges, and
+ * doing binary search on the entire wchar range is inefficient (especially
+ * considering the character range does not have to be contiguous, which
+ * means doing a new search after we get to the end of the current part
+ * of the range)
+ *
+ * therefore, stick with what is representable in the C locale and do a
+ * simple linear search instead, this should always get us reliable results
+ */
+
+static wint_t
+nextwctype(wint_t ch, wctype_t wct)
+{
+	if (ch == (wint_t)-1) {
+		/* locate first character in the class */
+		return findwchar(wct, 0, UCHAR_MAX);
+	}
+
+	if ((ch == (wint_t)-1) || (ch >= UCHAR_MAX))
+		return (wint_t)-1;
+
+	if (!iswctype(++ch, wct))
+		return findwchar(wct, ch, UCHAR_MAX);
+
+	return ch;
+}
+
 wint_t
 next(STR *s)
 {
@@ -86,8 +126,10 @@ next(STR *s)
 		default:
 			clen = mbrtowc(&wch, s->str, MB_LEN_MAX, NULL);
 			if (clen == (size_t)-1 || clen == (size_t)-2 ||
-			    clen == 0)
-				errc(1, EILSEQ, NULL);
+			    clen == 0) {
+				errno = EILSEQ;
+				err(1, NULL);
+			}
 			is_octal = 0;
 			s->lastch = wch;
 			s->str += clen;
@@ -116,7 +158,7 @@ next(STR *s)
 	case CCLASS_LOWER:
 		s->cnt++;
 		ch = nextwctype(s->lastch, s->cclass);
-		if (ch == -1) {
+		if (ch == (wint_t)-1) {
 			s->state = NORMAL;
 			return (next(s));
 		}
@@ -203,8 +245,10 @@ genequiv(STR *s)
 		s->str += 2;
 	} else {
 		clen = mbrtowc(&wc, s->str, MB_LEN_MAX, NULL);
-		if (clen == (size_t)-1 || clen == (size_t)-2 || clen == 0)
-			errc(1, EILSEQ, NULL);
+		if (clen == (size_t)-1 || clen == (size_t)-2 || clen == 0) {
+			errno = EILSEQ;
+			err(1, NULL);
+		}
 		s->equiv[0] = wc;
 		if (s->str[clen] != '=')
 			errx(1, "misplaced equivalence equals sign");
@@ -241,9 +285,10 @@ genequiv(STR *s)
 static int
 genrange(STR *s, int was_octal)
 {
-	int stopval, octal;
+	wint_t stopval;
+	int octal;
 	char *savestart;
-	int n, cnt, *p;
+	wint_t n, cnt, *p;
 	size_t clen;
 	wchar_t wc;
 
@@ -253,8 +298,10 @@ genrange(STR *s, int was_octal)
 		stopval = backslash(s, &octal);
 	else {
 		clen = mbrtowc(&wc, s->str, MB_LEN_MAX, NULL);
-		if (clen == (size_t)-1 || clen == (size_t)-2)
-			errc(1, EILSEQ, NULL);
+		if (clen == (size_t)-1 || clen == (size_t)-2) {
+			errno = EILSEQ;
+			err(1, NULL);
+		}
 		stopval = wc;
 		s->str += clen;
 	}
@@ -306,8 +353,10 @@ genseq(STR *s)
 		s->lastch = backslash(s, NULL);
 	else {
 		clen = mbrtowc(&wc, s->str, MB_LEN_MAX, NULL);
-		if (clen == (size_t)-1 || clen == (size_t)-2)
-			errc(1, EILSEQ, NULL);
+		if (clen == (size_t)-1 || clen == (size_t)-2) {
+			errno = EILSEQ;
+			err(1, NULL);
+		}
 		s->lastch = wc;
 		s->str += clen;
 	}
