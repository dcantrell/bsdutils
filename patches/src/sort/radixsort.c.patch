--- sort/radixsort.c.orig	2021-06-28 22:13:20.405036272 +0200
+++ sort/radixsort.c	2021-06-28 22:49:48.744266585 +0200
@@ -37,6 +37,7 @@ __FBSDID("$FreeBSD$");
 #if defined(SORT_THREADS)
 #include <pthread.h>
 #include <semaphore.h>
+#include <sched.h>
 #endif
 #include <stdlib.h>
 #include <string.h>
@@ -47,6 +48,8 @@ __FBSDID("$FreeBSD$");
 #include "coll.h"
 #include "radixsort.h"
 
+#include "compat.h"
+
 #define DEFAULT_SORT_FUNC_RADIXSORT mergesort
 
 #define TINY_NODE(sl) ((sl)->tosort_num < 65)
@@ -647,7 +650,7 @@ run_top_sort_level(struct sort_level *sl
 			pthread_t pth;
 
 			pthread_attr_init(&attr);
-			pthread_attr_setdetachstate(&attr, PTHREAD_DETACHED);
+			pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
 
 			for (;;) {
 				int res = pthread_create(&pth, &attr,
@@ -655,7 +658,7 @@ run_top_sort_level(struct sort_level *sl
 				if (res >= 0)
 					break;
 				if (errno == EAGAIN) {
-					pthread_yield();
+					sched_yield();
 					continue;
 				}
 				err(2, NULL);
@@ -684,7 +687,9 @@ run_sort(struct sort_list_item **base, s
 		pthread_mutexattr_t mattr;
 
 		pthread_mutexattr_init(&mattr);
+#ifdef PTHREAD_MUTEX_ADAPTIVE_NP
 		pthread_mutexattr_settype(&mattr, PTHREAD_MUTEX_ADAPTIVE_NP);
+#endif
 
 		pthread_mutex_init(&g_ls_mutex, &mattr);
 		pthread_cond_init(&g_ls_cond, NULL);
