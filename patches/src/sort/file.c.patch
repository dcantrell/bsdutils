--- sort/file.c.orig	2021-06-28 22:13:07.958291956 +0200
+++ sort/file.c	2021-06-28 23:56:20.892965803 +0200
@@ -33,12 +33,12 @@ __FBSDID("$FreeBSD$");
 #include <sys/mman.h>
 #include <sys/stat.h>
 #include <sys/types.h>
-#include <sys/queue.h>
 
 #include <err.h>
 #include <fcntl.h>
 #if defined(SORT_THREADS)
 #include <pthread.h>
+#include <sched.h>
 #endif
 #include <semaphore.h>
 #include <stdio.h>
@@ -52,6 +52,8 @@ __FBSDID("$FreeBSD$");
 #include "file.h"
 #include "radixsort.h"
 
+#include "compat.h"
+
 unsigned long long free_memory = 1000000;
 unsigned long long available_free_memory = 1000000;
 
@@ -102,13 +104,13 @@ struct file_header
 struct CLEANABLE_FILE
 {
 	char				*fn;
-	LIST_ENTRY(CLEANABLE_FILE)	 files;
+	struct CLEANABLE_FILE *next;
 };
 
 /*
  * List header of "cleanable" files list.
  */
-static LIST_HEAD(CLEANABLE_FILES,CLEANABLE_FILE) tmp_files;
+struct CLEANABLE_FILE *tmp_files;
 
 /*
  * Semaphore to protect the tmp file list.
@@ -128,7 +130,7 @@ void
 init_tmp_files(void)
 {
 
-	LIST_INIT(&tmp_files);
+	tmp_files = NULL;
 	sem_init(&tmp_files_sem, 0, 1);
 }
 
@@ -144,7 +146,8 @@ tmp_file_atexit(const char *tmp_file)
 		struct CLEANABLE_FILE *item =
 		    sort_malloc(sizeof(struct CLEANABLE_FILE));
 		item->fn = sort_strdup(tmp_file);
-		LIST_INSERT_HEAD(&tmp_files, item, files);
+		item->next = tmp_files;
+		tmp_files = item;
 		sem_post(&tmp_files_sem);
 	}
 }
@@ -158,7 +161,7 @@ clear_tmp_files(void)
 	struct CLEANABLE_FILE *item;
 
 	sem_wait(&tmp_files_sem);
-	LIST_FOREACH(item,&tmp_files,files) {
+	for (item = tmp_files; item; item = item->next) {
 		if ((item) && (item->fn))
 			unlink(item->fn);
 	}
@@ -176,7 +179,7 @@ file_is_tmp(const char* fn)
 
 	if (fn) {
 		sem_wait(&tmp_files_sem);
-		LIST_FOREACH(item,&tmp_files,files) {
+		for (item = tmp_files; item; item = item->next) {
 			if ((item) && (item->fn))
 				if (strcmp(item->fn, fn) == 0) {
 					ret = true;
@@ -632,7 +635,7 @@ file_reader_init(const char *fsrc)
 			size_t sz = 0;
 			int fd, flags;
 
-			flags = MAP_NOCORE | MAP_NOSYNC;
+			flags = MAP_PRIVATE;
 
 			fd = open(fsrc, O_RDONLY);
 			if (fd < 0)
@@ -654,6 +657,7 @@ file_reader_init(const char *fsrc)
 				close(fd);
 				break;
 			}
+			madvise(addr, sz, MADV_DONTDUMP);
 
 			ret->fd = fd;
 			ret->mmapaddr = addr;
@@ -1560,7 +1564,7 @@ mt_sort(struct sort_list *list,
 			pthread_attr_t attr;
 
 			pthread_attr_init(&attr);
-			pthread_attr_setdetachstate(&attr, PTHREAD_DETACHED);
+			pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
 
 			for (;;) {
 				int res = pthread_create(&pth, &attr,
@@ -1569,7 +1573,7 @@ mt_sort(struct sort_list *list,
 				if (res >= 0)
 					break;
 				if (errno == EAGAIN) {
-					pthread_yield();
+					sched_yield();
 					continue;
 				}
 				err(2, NULL);
