--- tail/forward.c.orig	2021-04-09 02:24:12.000000000 +0200
+++ tail/forward.c	2021-06-29 22:08:56.189155961 +0200
@@ -46,20 +46,21 @@ static const char sccsid[] = "@(#)forwar
 #include <sys/stat.h>
 #include <sys/time.h>
 #include <sys/mman.h>
-#include <sys/event.h>
+#include <sys/inotify.h>
+#include <sys/vfs.h>
+
+#include <linux/magic.h>
 
 #include <err.h>
 #include <errno.h>
 #include <fcntl.h>
 #include <limits.h>
+#include <poll.h>
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
 #include <unistd.h>
 
-#include <libcasper.h>
-#include <casper/cap_fileargs.h>
-
 #include "extern.h"
 
 static void rlines(FILE *, const char *fn, off_t, struct stat *);
@@ -68,12 +69,12 @@ static void set_events(file_info_t *file
 
 /* defines for inner loop actions */
 #define USE_SLEEP	0
-#define USE_KQUEUE	1
+#define USE_INOTIFY	1
 #define ADD_EVENTS	2
 
-static struct kevent *ev;
+static int *ev;
 static int action = USE_SLEEP;
-static int kq;
+static int ifd;
 
 static const file_info_t *last;
 
@@ -265,41 +266,118 @@ show(file_info_t *file)
 	return 1;
 }
 
+/* a rather ugly list of filesystems from linux/magic.h specifying whether
+ * we can watch them with inotify; explicitly specify them as we can still
+ * fall back to sleep for the other filesystems, while the opposite would
+ * cause actual practical problems
+ */
+static int
+fs_is_local(unsigned long magic)
+{
+	switch (magic) {
+	case ADFS_SUPER_MAGIC:
+	case AFFS_SUPER_MAGIC:
+	case ANON_INODE_FS_MAGIC:
+	case BDEVFS_MAGIC:
+	case BINFMTFS_MAGIC:
+	case BPF_FS_MAGIC:
+	case BTRFS_SUPER_MAGIC:
+	case BTRFS_TEST_MAGIC:
+	case CGROUP_SUPER_MAGIC:
+	case CGROUP2_SUPER_MAGIC:
+	case CRAMFS_MAGIC:
+	case DEBUGFS_MAGIC:
+	case DEVPTS_SUPER_MAGIC:
+	case ECRYPTFS_SUPER_MAGIC:
+	case EFS_SUPER_MAGIC:
+	case EXT2_SUPER_MAGIC:
+	case F2FS_SUPER_MAGIC:
+	case FUTEXFS_SUPER_MAGIC:
+	case HOSTFS_SUPER_MAGIC:
+	case HPFS_SUPER_MAGIC:
+	case HUGETLBFS_MAGIC:
+	case ISOFS_SUPER_MAGIC:
+	case JFFS2_SUPER_MAGIC:
+	case MINIX_SUPER_MAGIC:
+	case MINIX_SUPER_MAGIC2:
+	case MINIX2_SUPER_MAGIC:
+	case MINIX2_SUPER_MAGIC2:
+	case MINIX3_SUPER_MAGIC:
+	case MSDOS_SUPER_MAGIC:
+	case MTD_INODE_FS_MAGIC:
+	case NILFS_SUPER_MAGIC:
+	case NSFS_MAGIC:
+	case OPENPROM_SUPER_MAGIC:
+	case OVERLAYFS_SUPER_MAGIC:
+	case PROC_SUPER_MAGIC:
+	case PSTOREFS_MAGIC:
+	case QNX4_SUPER_MAGIC:
+	case QNX6_SUPER_MAGIC:
+	case RAMFS_MAGIC:
+	case REISERFS_SUPER_MAGIC:
+	case SECURITYFS_MAGIC:
+	case SELINUX_MAGIC:
+	case SMACK_MAGIC:
+	case SOCKFS_MAGIC:
+	case SQUASHFS_MAGIC:
+	case SYSFS_MAGIC:
+	case TMPFS_MAGIC:
+	case TRACEFS_MAGIC:
+	case UDF_SUPER_MAGIC:
+	case USBDEVICE_SUPER_MAGIC:
+	case V9FS_MAGIC:
+	case XENFS_SUPER_MAGIC:
+	case XFS_SUPER_MAGIC:
+		return 1;
+	default:
+		break;
+	}
+	return 0;
+}
+
+/* in addition to handling the watches, this also keeps a mapping of inotify
+ * watches to the actual file descriptors, it does so by keeping fixed indexes
+ * for each file; watches are registered so that they do not replace each other
+ */
 static void
 set_events(file_info_t *files)
 {
-	int i, n = 0;
+	int i;
 	file_info_t *file;
-	struct timespec ts;
 	struct statfs sf;
 
-	ts.tv_sec = 0;
-	ts.tv_nsec = 0;
-
-	action = USE_KQUEUE;
+	action = USE_INOTIFY;
 	for (i = 0, file = files; i < no_files; i++, file++) {
 		if (! file->fp)
 			continue;
 
-		if (fstatfs(fileno(file->fp), &sf) == 0 &&
-		    (sf.f_flags & MNT_LOCAL) == 0) {
+		if (fstatfs(fileno(file->fp), &sf) == 0 && !fs_is_local(sf.f_type)) {
 			action = USE_SLEEP;
 			return;
 		}
 
-		if (Fflag && fileno(file->fp) != STDIN_FILENO) {
-			EV_SET(&ev[n], fileno(file->fp), EVFILT_VNODE,
-			    EV_ADD | EV_ENABLE | EV_CLEAR,
-			    NOTE_DELETE | NOTE_RENAME, 0, 0);
-			n++;
+		if (fileno(file->fp) == STDIN_FILENO) {
+			action = USE_SLEEP;
+			return;
 		}
-		EV_SET(&ev[n], fileno(file->fp), EVFILT_READ,
-		    EV_ADD | EV_ENABLE | EV_CLEAR, 0, 0, 0);
-		n++;
 	}
 
-	if (kevent(kq, ev, n, NULL, 0, &ts) < 0) {
-		action = USE_SLEEP;
+	for (i = 0, file = files; i < no_files; i++, file++) {
+		uint32_t mask = IN_MODIFY | IN_MASK_ADD;
+
+		if (! file->fp) {
+			ev[i * 2 + 1] = 0;
+			continue;
+		}
+
+		ev[i * 2 + 1] = fileno(file->fp);
+
+		if (Fflag)
+			mask |= IN_DELETE_SELF | IN_MOVE_SELF;
+
+		ev[i * 2] = inotify_add_watch(ifd, file->file_name, mask);
+		if (ev[i * 2] < 0)
+			err(1, "inotify_add_watch");
 	}
 }
 
@@ -314,7 +392,7 @@ follow(file_info_t *files, enum STYLE st
 	struct stat sb2;
 	file_info_t *file;
 	FILE *ftmp;
-	struct timespec ts;
+	struct pollfd fd;
 
 	/* Position each of the files */
 
@@ -337,22 +415,26 @@ follow(file_info_t *files, enum STYLE st
 
 	last = --file;
 
-	kq = kqueue();
-	if (kq < 0)
-		err(1, "kqueue");
-	ev = malloc(n * sizeof(struct kevent));
+	ifd = inotify_init1(IN_NONBLOCK);
+	if (ifd < 0)
+		err(1, "inotify");
+
+	ev = calloc(no_files * 2, sizeof(int));
 	if (! ev)
-	    err(1, "Couldn't allocate memory for kevents.");
+		err(1, "Couldn't allocate memory for watch descriptors.");
+
 	set_events(files);
 
+	fd.fd = ifd;
+	fd.events = POLLIN;
+
 	for (;;) {
 		ev_change = 0;
 		if (Fflag) {
 			for (i = 0, file = files; i < no_files; i++, file++) {
 				if (!file->fp) {
 					file->fp =
-					    fileargs_fopen(fa, file->file_name,
-					    "r");
+					    fopen(file->file_name, "r");
 					if (file->fp != NULL &&
 					    fstat(fileno(file->fp), &file->st)
 					    == -1) {
@@ -365,7 +447,7 @@ follow(file_info_t *files, enum STYLE st
 				}
 				if (fileno(file->fp) == STDIN_FILENO)
 					continue;
-				ftmp = fileargs_fopen(fa, file->file_name, "r");
+				ftmp = fopen(file->file_name, "r");
 				if (ftmp == NULL ||
 				    fstat(fileno(file->fp), &sb2) == -1) {
 					if (errno != ENOENT)
@@ -405,28 +487,61 @@ follow(file_info_t *files, enum STYLE st
 			set_events(files);
 
 		switch (action) {
-		case USE_KQUEUE:
-			ts.tv_sec = 1;
-			ts.tv_nsec = 0;
+		case USE_INOTIFY: {
 			/*
 			 * In the -F case we set a timeout to ensure that
 			 * we re-stat the file at least once every second.
 			 */
-			n = kevent(kq, NULL, 0, ev, 1, Fflag ? &ts : NULL);
+			n = poll(&fd, 1, Fflag ? 1000 : -1);
 			if (n < 0)
-				err(1, "kevent");
+				err(1, "poll");
 			if (n == 0) {
 				/* timeout */
 				break;
-			} else if (ev->filter == EVFILT_READ && ev->data < 0) {
-				/* file shrank, reposition to end */
-				if (lseek(ev->ident, (off_t)0, SEEK_END) == -1) {
-					ierr(file->file_name);
-					continue;
+			} else if (fd.revents & POLLIN) {
+				struct inotify_event iev;
+				ssize_t len = read(ifd, &iev, sizeof(iev));
+
+				if (len < 0 && errno != EAGAIN)
+					err(1, "read");
+
+				if (len != sizeof(iev))
+					break;
+
+				/* skip name field */
+				for (; iev.len > 0; --iev.len) {
+					char c;
+					if (read(ifd, &c, 1) != 1)
+						err(1, "read");
+				}
+
+				/* we only care about the file shrinking here */
+				if (!(iev.mask & IN_MODIFY))
+					break;
+
+				/* locate the event source */
+				for (i = 0; i < n; ++i) {
+					struct stat st;
+					if (ev[i * 2] != iev.wd)
+						continue;
+					/* ignore watches with a cleared file descriptor */
+					if (ev[i * 2 + 1] == 0)
+						continue;
+					/* located a file, re-stat it and if it's smaller
+					 * than its current position, reposition to end */
+					if (fstat(ev[i * 2 + 1], &st) < 0)
+						err(1, "stat");
+					/* all is ok */
+					if (st.st_size > lseek(ev[i * 2 + 1], 0, SEEK_CUR))
+						break;
+					/* reposition */
+					if (lseek(ev[i * 2 + 1], 0, SEEK_END) < 0)
+						err(1, "lseek");
+					break;
 				}
 			}
 			break;
-
+		}
 		case USE_SLEEP:
 			(void) usleep(250000);
 			break;
