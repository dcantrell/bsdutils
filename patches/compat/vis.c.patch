--- compat/vis.c.orig	2021-04-09 02:24:02.000000000 +0200
+++ compat/vis.c	2021-06-12 05:22:40.071699330 +0200
@@ -64,7 +64,6 @@ __FBSDID("$FreeBSD$");
 #define	_DIAGASSERT(x)	assert(x)
 #endif
 
-#include "namespace.h"
 #include <sys/types.h>
 #include <sys/param.h>
 
@@ -74,6 +73,7 @@ __FBSDID("$FreeBSD$");
 #include <stdlib.h>
 #include <wchar.h>
 #include <wctype.h>
+#include <limits.h>
 
 #ifdef __weak_alias
 __weak_alias(strvisx,_strvisx)
@@ -81,7 +81,6 @@ __weak_alias(strvisx,_strvisx)
 
 #if !HAVE_VIS || !HAVE_SVIS
 #include <ctype.h>
-#include <limits.h>
 #include <stdio.h>
 #include <string.h>
 
@@ -133,30 +132,6 @@ iscgraph(int c) {
 static const wchar_t char_shell[] = L"'`\";&<>()|{}]\\$!^~";
 static const wchar_t char_glob[] = L"*?[#";
 
-#if !HAVE_NBTOOL_CONFIG_H
-#ifndef __NetBSD__
-/*
- * On NetBSD MB_LEN_MAX is currently 32 which does not fit on any integer
- * integral type and it is probably wrong, since currently the maximum
- * number of bytes and character needs is 6. Until this is fixed, the
- * loops below are using sizeof(uint64_t) - 1 instead of MB_LEN_MAX, and
- * the assertion is commented out.
- */
-#ifdef __FreeBSD__
-/*
- * On FreeBSD including <sys/systm.h> for CTASSERT only works in kernel
- * mode.
- */
-#ifndef CTASSERT
-#define CTASSERT(x)             _CTASSERT(x, __LINE__)
-#define _CTASSERT(x, y)         __CTASSERT(x, y)
-#define __CTASSERT(x, y)        typedef char __assert ## y[(x) ? 1 : -1]
-#endif
-#endif /* __FreeBSD__ */
-CTASSERT(MB_LEN_MAX <= sizeof(uint64_t));
-#endif /* !__NetBSD__ */
-#endif
-
 /*
  * This is do_hvis, for HTTP style (RFC 1808)
  */
@@ -305,7 +280,7 @@ static wchar_t *
 do_svis(wchar_t *dst, wint_t c, int flags, wint_t nextc, const wchar_t *extra)
 {
 	int iswextra, i, shft;
-	uint64_t bmsk, wmsk;
+	u_int64_t bmsk, wmsk;
 
 	iswextra = wcschr(extra, c) != NULL;
 	if (!iswextra && (ISGRAPH(flags, c) || iswwhite(c) ||
@@ -318,11 +293,11 @@ do_svis(wchar_t *dst, wint_t c, int flag
 	wmsk = 0;
 	for (i = sizeof(wmsk) - 1; i >= 0; i--) {
 		shft = i * NBBY;
-		bmsk = (uint64_t)0xffLL << shft;
+		bmsk = (u_int64_t)0xffLL << shft;
 		wmsk |= bmsk;
 		if ((c & wmsk) || i == 0)
 			dst = do_mbyte(dst, (wint_t)(
-			    (uint64_t)(c & bmsk) >> shft),
+			    (u_int64_t)(c & bmsk) >> shft),
 			    flags, nextc, iswextra);
 	}
 
@@ -397,7 +372,7 @@ istrsenvisx(char **mbdstp, size_t *dlen,
 {
 	wchar_t *dst, *src, *pdst, *psrc, *start, *extra;
 	size_t len, olen;
-	uint64_t bmsk, wmsk;
+	u_int64_t bmsk, wmsk;
 	wint_t c;
 	visfun_t f;
 	int clen = 0, cerr, error = -1, i, shft;
@@ -554,11 +529,11 @@ istrsenvisx(char **mbdstp, size_t *dlen,
 			wmsk = 0;
 			for (i = sizeof(wmsk) - 1; i >= 0; i--) {
 				shft = i * NBBY;
-				bmsk = (uint64_t)0xffLL << shft;
+				bmsk = (u_int64_t)0xffLL << shft;
 				wmsk |= bmsk;
 				if ((*dst & wmsk) || i == 0)
 					mbdst[clen++] = (char)(
-					    (uint64_t)(*dst & bmsk) >>
+					    (u_int64_t)(*dst & bmsk) >>
 					    shft);
 			}
 			cerr = 1;
